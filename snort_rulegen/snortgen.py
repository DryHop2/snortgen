import os

from snort_rulegen.rule_templates import build_rule
from snort_rulegen.sid_manager import get_next_sid
from snort_rulegen.utils import (
    validate_protocol,
    validate_ip,
    validate_port,
    validate_priority,
    validate_offset_depth,
    validate_flags,
    validate_pcre,
    validate_metadata,
    validate_msg,
    validate_reference,
    get_latest_revision
)


def run_interactive():
    print("Snort Rule Generator")
    print("--------------------")

    # Protocol
    proto = input("Protocol [tcp/udp/icmp/ip] (default: tcp) ").strip().lower() or "tcp"
    try:
        proto = validate_protocol(proto)
    except ValueError as e:
        print(f"Protocol error: {e}")
        return
    
    # IP
    src_ip = input("Source IP [any]: ").strip() or "any"
    src_port = input("Source Port [any]: ").strip() or "any"
    dst_ip = input("Destination IP [$HOME_NET]: ").strip() or "$HOME_NET"
    dst_port = input("Destination port [80]: ").strip() or "80"

    try:
        src_ip = validate_ip(src_ip)
        dst_ip = validate_ip(dst_ip)
        src_port = validate_port(src_port)
        dst_port = validate_port(dst_port)
    except ValueError as e:
        print(f"Input error: {e}")
        return
    
    # Payload match
    content = input("Content to match (e.g., cmd.exe): ").strip()
    nocase = input("Apply nocase (case-insensitive match)? [y/N]: ").strip().lower() == "y"
    
    offset = input("Set offset (starting byte for search, leave blank to skip): ").strip()
    depth = input("Set depth (max bytes to search, leave blank to skip): ").strip()
    try:
        offset, depth = validate_offset_depth(offset, depth)
    except ValueError as e:
        print(f"Offset/depth error: {e}")
        offset = None
        depth = None
    
    # TCP flags
    flags = input("TCP flags to match (e.g., S, SA, leave blank to skip): ").strip().upper()
    if flags:
        try:
            flags = validate_flags(flags)
        except ValueError as e:
            print(f"Flags error: {e}")
            flags = None

    # PCRE
    pcre = input("Add PCRE regex match (format: /regex/modifiers, leave blank to skip): ").strip()
    if pcre:
        try:
            pcre = validate_pcre(pcre)
        except ValueError as e:
            print(f"PCRE error: {e}")
            pcre = None
    
    # Classtype and priority
    classtype = input("Set classtype (e.g., attempted-admin, leave blank to skip): ").strip().lower()
    priority = input("Set priority (1 = high, 3 = low, leave blank to skip): ").strip()
    if priority:
        try:
            priority = validate_priority(priority)
        except ValueError as e:
            print(f"Priority error: {e}")
            priority = None
    
    # Metadata
    metadata = None
    use_metatdata = input("Would you like to add metadata to Snort rule? [y/N]: ").strip().lower() == "y"
    if use_metatdata:
        raw = input("Enter metadata (e.g., key value, key value): ").strip()
        try:
            metadata = validate_metadata(raw)
        except ValueError as e:
            print(f"Metadata error: {e}")

    # Reference
    reference = input("Add reference (format: type, value - e.g., cve,2021-44228 or url, https://....) [leave blank to skip]: ").strip()
    if reference:
        try:
            reference = validate_reference(reference)
        except ValueError as e:
            print(f"Reference error: {e}")
            reference = None

    # Message
    msg = input("Rule message: (default: Generated by Snortgen): ").strip() or "Generated by SnortGen"
    msg = validate_msg(msg)

    # Output path
    default_out = "rules/local.rules"
    out_path = input(f"\nOutput path (default: {default_out}): ").strip() or default_out

    # Rule construction
    sid = int(input("SID (leave blank to auto-generate): ").strip() or 0)
    if not sid:
        sid = get_next_sid()
    rev = get_latest_revision(out_path, sid)
    rule = build_rule(proto=proto, 
                      src_ip=src_ip, 
                      src_port=src_port, 
                      dst_ip=dst_ip, 
                      dst_port=dst_port, 
                      msg=msg, 
                      content=content, 
                      sid=sid,
                      rev=rev,
                      nocase=nocase,
                      depth=depth,
                      offset=offset,
                      flags=flags,
                      pcre=pcre,
                      classtype=classtype,
                      priority=priority,
                      metadata=metadata,
                      reference=reference)

    print("\nGenerated Rule:")
    print(rule)

    # Save directory/file
    if os.path.exists(out_path):
        print(f"Warning: {out_path} already exists and will be appended to.")
    dir_path = os.path.dirname(out_path) or "."
    os.makedirs(dir_path, exist_ok=True)

    with open(out_path, "a") as f:
        f.write(rule + "\n")

    print(f"\nRule saved to {out_path}")


def run(args):
    try:
        offset = args.offset
        depth = args.depth
        if offset is not None or depth is not None:
            offset, depth = validate_offset_depth(offset, depth)

        sid = args.sid if args.sid else get_next_sid()
        out_path = args.outfile or "rules/local.rules"
        rev = get_latest_revision(out_path, sid)
        rule = build_rule(
            proto=args.proto,
            src_ip=args.src_ip,
            src_port=args.src_port,
            dst_ip=args.dst_ip,
            dst_port=args.dst_port,
            msg=args.msg or "Generated by SnortGen",
            content=args.content,
            sid=sid,
            rev=rev,
            nocase=args.nocase,
            depth=depth,
            offset=offset,
            flags=args.flags,
            pcre=args.pcre,
            classtype=args.classtype,
            priority=args.priority,
            metadata=args.metadata,
            reference=args.reference
        )

        print("\nGenerated Rule:")
        print(rule)

        if args.verbose and os.path.exists(out_path):
            print(f"Warning: {out_path} already exists and will be appended to.")
        dir_path = os.path.dirname(out_path) or "."
        os.makedirs(dir_path, exist_ok=True)

        with open(out_path, "a") as f:
            f.write(rule + "\n")

        print(f"\nRule saved to {out_path}")
    except Exception as e:
        print(f"Error generating rule: {e}")