import os
import ipaddress

from snort_rulegen.rule_templates import build_rule
from snort_rulegen.sid_manager import get_next_sid


def prompt_protocol():
    while True:
        proto = input("Protocol [tcp/udp/icmp]: ").strip().lower()
        if proto in ("tcp", "udp", "icmp", ""):
            return proto or "tcp"
        print("Invalid protocol. Choose from tcp, udp, icmp.")


def prompt_ip(prompt_text, allow_vars=False, default=None):
    while True:
        val = input(prompt_text).strip()
        if not val and default:
            return default
        if val.lower() == "any":
            return "any"
        if allow_vars and val.startswith("$"):
            return val
        try:
            ipaddress.ip_address(val)
            return val
        except ValueError:
            print("Invalid IP address.")


def prompt_port(prompt_text):
    while True:
        val = input(prompt_text).strip()
        if val.lower() == "any" or val == "":
            return "any"
        try:
            port = int(val)
            if 0 <= port <= 65535:
                return str(port)
            print("Port must be between 0 and 65535.")
        except ValueError:
            print("Invalid port. Must be an integer or 'any'.")


def run():
    print("Snort Rule Generator")
    print("--------------------")

    proto = prompt_protocol()
    src_ip = prompt_ip("Source IP [any]: ", allow_vars=False, default="any")
    src_port = prompt_port("Source Port [any]: ")
    dst_ip = prompt_ip("Destination IP [$HOME_NET]: ", allow_vars=True, default="$HOME_NET")
    dst_port = prompt_port("Destination port [80]: ") or "80"

    content = input("Content to match (e.g., cmd.exe): ").strip()
    nocase = input("Apply nocase (case-insensitive match)? [y/N]: ").strip().lower() == "y"
    offset = input("Set offset (starting byte for search, leave blank to skip): ").strip()
    if offset and not offset.isdigit():
        print("Invalid offset. Ignoring.")
        offset = None
    depth = input("Set depth (max bytes to search, leave blank to skip): ").strip()
    if depth and not depth.isdigit():
        print("Invalid depth. Ignoring.")
        depth = None
    if offset and depth:
        try:
            if int(offset) > int(depth):
                print("Offset cannot be greater than depth. Ignoring offset.")
                offset = None
        except ValueError:
            print("Invalid numeric input for offset or depth.")
            offset = None
    flags = input("TCP flags to match (e.g., S, SA, leave blank to skip): ").strip().upper()
    pcre = input("Add PCRE regex match (format: /regex/modifiers, leave blank to skip): ").strip()
    if pcre and not (pcre.startswith("/") and pcre.endswith("/")) and not ('/' in pcre[1:]):
        print("PCRE must start and end with '/' and include pattern. Ignoring.")
        pcre = None
    classtype = input("Set classtype (e.g., attempted-admin, leave blank to skip): ").strip().lower()
    priority = input("Set priority (1 = high, 3 = low, leave blank to skip): ").strip()
    if priority and not priority.isdigit():
        print("Invalid priority. Must be 1 - 3. Ignoring.")
        priority = None
    elif priority and int(priority) not in (1, 2, 3):
        print("Priority must be 1, 2, or 3. Ignoring.")
        priority = None
    use_metatdata = input("Would you like to add metadata to Snort rule? [y/N]: ").strip().lower() == "y"
    if use_metatdata:
        metadata_tags = []
        target = input("Attack target (e.g., server, client) [leave blank to skip]: ").strip()
        if target:
            metadata_tags.append(f"attack_target {target}")
        deployment = input("Deployment context (e.g., perimeter, internal): ").strip()
        if deployment:
            metadata_tags.append(f"deployment {deployment}")
        created = input("Date created (e.g., 2024_06_19): ").strip()
        if created:
            metadata_tags.append(f"created_at {created}")
        custom = input("Custom metadata (e.g., policy internal, tactic persistence): ").strip()
        if custom:
            metadata_tags.append(custom)
        metadata = ", ".join(metadata_tags) if metadata_tags else None
    reference = input("Add reference (format: type, value - e.g., cve,2021-44228 or url, https://....) [leave blank to skip]: ").strip()
    if reference and "," not in reference:
        print("Reference must be in format type,value (e.g., url,http://...). Ignoring.")
        reference = None

    msg = input("Rule message: ").strip() or "Generated by SnortGen"

    sid = get_next_sid()
    rule = build_rule(proto, src_ip, src_port, dst_ip, dst_port, 
                      msg, content, sid, 
                      nocase=nocase,
                      depth=depth,
                      offset=offset,
                      flags=flags,
                      pcre=pcre,
                      classtype=classtype,
                      priority=priority,
                      metadata=metadata,
                      reference=reference)

    print("\nGenerated Rule:")
    print(rule)

    out_path = "rules/local.rules"
    os.makedirs(os.path.dirname(out_path), exist_ok=True)

    with open(out_path, "a") as f:
        f.write(rule + "\n")

    print(f"\nRule saved to {out_path}")