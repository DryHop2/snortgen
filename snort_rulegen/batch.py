import os
import json
from snort_rulegen.rule_templates import build_rule
from snort_rulegen.sid_manager import get_next_sid
from snort_rulegen.utils import (
    validate_protocol,
    validate_ip,
    validate_port,
    validate_priority,
    validate_pcre,
    validate_flags,
    validate_metadata,
    validate_msg,
    validate_offset_depth,
    validate_reference
)

def run_batch(filepath, outfile="rules/local.rules", verbose=False, dry_run=False):
    try:
        with open(filepath, "r") as f:
            data = json.load(f)

        if not isinstance(data, list):
            print("Error: batch file must contain a list of rule objects.")
            return
        
        generated = 0
        skipped = 0

        for idx, rule in enumerate(data, 1):
            try:
                proto = validate_protocol(rule.get("proto", "tcp"))
                src_ip = validate_ip(rule.get("src_ip", "any"))
                src_port = validate_port(rule.get("src_prt", "any"))
                dst_ip = validate_ip(rule.get("dst_ip", "$HOME_NET"))
                dst_port = validate_port(rule.get("dst_port", "80"))
                msg = validate_msg(rule.get("msg", "Generated by SnortGen"))
                content = rule.get("content")
                nocase = rule.get("nocase", False)
                offset, depth = validate_offset_depth(rule.get("offset"), rule.get("depth"))
                flags = validate_flags(rule["flags"]) if "flags" in rule else None
                pcre = validate_pcre(rule["pcre"]) if "pcre" in rule else None
                classtype = rule.get("classtype")
                priority = validate_priority(rule["priority"]) if "priority" in rule else None
                metadata = validate_metadata(rule["metatdata"]) if "metadata" in rule else None
                reference = validate_reference(rule["reference"]) if "reference" in rule else None

                sid = get_next_sid()
                snort_rule = build_rule(
                    proto, src_ip, src_port, dst_ip, dst_port,
                    msg, content, sid,
                    nocase=nocase,
                    offset=offset,
                    depth=depth,
                    flags=flags,
                    pcre=pcre,
                    classtype=classtype,
                    priority=priority,
                    metadata=metadata,
                    reference=reference
                )

                if dry_run or verbose:
                    print(f"[Rule {idx}] {snort_rule}")

                if not dry_run:
                    dir_path = os.path.dirname(outfile) or "."
                    os.makedirs(dir_path, exist_ok=True)
                    with open(outfile, "a") as out:
                        out.write(snort_rule + "\n")

                generated += 1
            except Exception as e:
                print(f"[Rule {idx}] Skipped: {e}")
                skipped += 1
        
        print(f"\nBatch complete: {generated} rule(s) written, {skipped} skipped.")

    except Exception as e:
        print(f"Error reading batch file: {e}")